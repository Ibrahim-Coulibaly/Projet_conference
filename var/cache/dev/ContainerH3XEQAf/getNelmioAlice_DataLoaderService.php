<?php

use Symfony\Component\DependencyInjection\Argument\RewindableGenerator;
use Symfony\Component\DependencyInjection\Exception\RuntimeException;

// This file has been auto-generated by the Symfony Dependency Injection Component for internal use.
// Returns the public 'nelmio_alice.data_loader' shared service.

$a = new \Nelmio\Alice\FixtureBuilder\Denormalizer\FlagParser\ElementFlagParser(new \Nelmio\Alice\FixtureBuilder\Denormalizer\FlagParser\FlagParserRegistry([0 => new \Nelmio\Alice\FixtureBuilder\Denormalizer\FlagParser\Chainable\ConfiguratorFlagParser(), 1 => new \Nelmio\Alice\FixtureBuilder\Denormalizer\FlagParser\Chainable\ExtendFlagParser(), 2 => new \Nelmio\Alice\FixtureBuilder\Denormalizer\FlagParser\Chainable\OptionalFlagParser(), 3 => new \Nelmio\Alice\FixtureBuilder\Denormalizer\FlagParser\Chainable\TemplateFlagParser(), 4 => new \Nelmio\Alice\FixtureBuilder\Denormalizer\FlagParser\Chainable\UniqueFlagParser()]));
$b = new \Nelmio\Alice\FixtureBuilder\ExpressionLanguage\Parser\TokenParser\Chainable\ArgumentEscaper();

$c = new \Nelmio\Alice\FixtureBuilder\Denormalizer\Fixture\SpecificationBagDenormalizer\Value\UniqueValueDenormalizer(new \Nelmio\Alice\FixtureBuilder\Denormalizer\Fixture\SpecificationBagDenormalizer\Value\SimpleValueDenormalizer(new \Nelmio\Alice\FixtureBuilder\ExpressionLanguage\Parser\FunctionFixtureReferenceParser(new \Nelmio\Alice\FixtureBuilder\ExpressionLanguage\Parser\StringMergerParser(new \Nelmio\Alice\FixtureBuilder\ExpressionLanguage\Parser\SimpleParser(new \Nelmio\Alice\FixtureBuilder\ExpressionLanguage\Lexer\EmptyValueLexer(new \Nelmio\Alice\FixtureBuilder\ExpressionLanguage\Lexer\ReferenceEscaperLexer(new \Nelmio\Alice\FixtureBuilder\ExpressionLanguage\Lexer\GlobalPatternsLexer(new \Nelmio\Alice\FixtureBuilder\ExpressionLanguage\Lexer\FunctionLexer(new \Nelmio\Alice\FixtureBuilder\ExpressionLanguage\Lexer\StringThenReferenceLexer(new \Nelmio\Alice\FixtureBuilder\ExpressionLanguage\Lexer\SubPatternsLexer(new \Nelmio\Alice\FixtureBuilder\ExpressionLanguage\Lexer\ReferenceLexer())))))), new \Nelmio\Alice\FixtureBuilder\ExpressionLanguage\Parser\TokenParser\TokenParserRegistry([0 => new \Nelmio\Alice\FixtureBuilder\ExpressionLanguage\Parser\TokenParser\Chainable\DynamicArrayTokenParser(), 1 => new \Nelmio\Alice\FixtureBuilder\ExpressionLanguage\Parser\TokenParser\Chainable\EscapedValueTokenParser(), 2 => new \Nelmio\Alice\FixtureBuilder\ExpressionLanguage\Parser\TokenParser\Chainable\FixtureListReferenceTokenParser(), 3 => new \Nelmio\Alice\FixtureBuilder\ExpressionLanguage\Parser\TokenParser\Chainable\FixtureMethodReferenceTokenParser(), 4 => new \Nelmio\Alice\FixtureBuilder\ExpressionLanguage\Parser\TokenParser\Chainable\FixtureRangeReferenceTokenParser(), 5 => new \Nelmio\Alice\FixtureBuilder\ExpressionLanguage\Parser\TokenParser\Chainable\MethodReferenceTokenParser(), 6 => new \Nelmio\Alice\FixtureBuilder\ExpressionLanguage\Parser\TokenParser\Chainable\OptionalTokenParser(), 7 => new \Nelmio\Alice\FixtureBuilder\ExpressionLanguage\Parser\TokenParser\Chainable\ParameterTokenParser(), 8 => new \Nelmio\Alice\FixtureBuilder\ExpressionLanguage\Parser\TokenParser\Chainable\PropertyReferenceTokenParser(), 9 => new \Nelmio\Alice\FixtureBuilder\ExpressionLanguage\Parser\TokenParser\Chainable\VariableReferenceTokenParser(), 10 => new \Nelmio\Alice\FixtureBuilder\ExpressionLanguage\Parser\TokenParser\Chainable\SimpleReferenceTokenParser(), 11 => new \Nelmio\Alice\FixtureBuilder\ExpressionLanguage\Parser\TokenParser\Chainable\StringArrayTokenParser(), 12 => new \Nelmio\Alice\FixtureBuilder\ExpressionLanguage\Parser\TokenParser\Chainable\StringTokenParser($b), 13 => new \Nelmio\Alice\FixtureBuilder\ExpressionLanguage\Parser\TokenParser\Chainable\TolerantFunctionTokenParser(new \Nelmio\Alice\FixtureBuilder\ExpressionLanguage\Parser\TokenParser\Chainable\IdentityTokenParser(new \Nelmio\Alice\FixtureBuilder\ExpressionLanguage\Parser\TokenParser\Chainable\FunctionTokenParser($b))), 14 => new \Nelmio\Alice\FixtureBuilder\ExpressionLanguage\Parser\TokenParser\Chainable\VariableTokenParser(), 15 => new \Nelmio\Alice\FixtureBuilder\ExpressionLanguage\Parser\TokenParser\Chainable\WildcardReferenceTokenParser()]))))));

$d = new \Nelmio\Alice\FixtureBuilder\Denormalizer\Fixture\SpecificationBagDenormalizer\Arguments\SimpleArgumentsDenormalizer($c);
$e = new \Nelmio\Alice\FixtureBuilder\Denormalizer\Fixture\SpecificationBagDenormalizer\Calls\CallsWithFlagsDenormalizer(new \Nelmio\Alice\FixtureBuilder\Denormalizer\Fixture\SpecificationBagDenormalizer\Calls\FunctionDenormalizer($d), [0 => new \Nelmio\Alice\FixtureBuilder\Denormalizer\Fixture\SpecificationBagDenormalizer\Calls\MethodFlagHandler\ConfiguratorFlagHandler(), 1 => new \Nelmio\Alice\FixtureBuilder\Denormalizer\Fixture\SpecificationBagDenormalizer\Calls\MethodFlagHandler\OptionalFlagHandler()]);

$f = new \Nelmio\Alice\FixtureBuilder\Denormalizer\Fixture\SpecificationBagDenormalizer\SimpleSpecificationsDenormalizer(new \Nelmio\Alice\FixtureBuilder\Denormalizer\Fixture\SpecificationBagDenormalizer\Constructor\LegacyConstructorDenormalizer(new \Nelmio\Alice\FixtureBuilder\Denormalizer\Fixture\SpecificationBagDenormalizer\Constructor\ConstructorDenormalizer($d), new \Nelmio\Alice\FixtureBuilder\Denormalizer\Fixture\SpecificationBagDenormalizer\Constructor\FactoryDenormalizer($e)), new \Nelmio\Alice\FixtureBuilder\Denormalizer\Fixture\SpecificationBagDenormalizer\Property\SimplePropertyDenormalizer($c), $e);
$g = new \Nelmio\Alice\PropertyAccess\StdPropertyAccessor(($this->services['easyadmin.property_accessor'] ?? $this->getEasyadmin_PropertyAccessorService()));

$h = new \Nelmio\Alice\Generator\Resolver\Value\ValueResolverRegistry([0 => new \Nelmio\Alice\Generator\Resolver\Value\Chainable\ArrayValueResolver(), 1 => new \Nelmio\Alice\Generator\Resolver\Value\Chainable\DynamicArrayValueResolver(), 2 => new \Nelmio\Alice\Generator\Resolver\Value\Chainable\EvaluatedValueResolver(), 3 => new \Nelmio\Alice\Generator\Resolver\Value\Chainable\FunctionCallArgumentResolver(new \Nelmio\Alice\Generator\Resolver\Value\Chainable\PhpFunctionCallValueResolver($this->parameters['nelmio_alice.functions_blacklist'], new \Nelmio\Alice\Generator\Resolver\Value\Chainable\FakerFunctionCallValueResolver(($this->services['Faker\\Generator'] ?? $this->load('getGeneratorService.php'))))), 4 => new \Nelmio\Alice\Generator\Resolver\Value\Chainable\FixturePropertyReferenceResolver($g), 5 => new \Nelmio\Alice\Generator\Resolver\Value\Chainable\FixtureMethodCallReferenceResolver(), 6 => new \Nelmio\Alice\Generator\Resolver\Value\Chainable\UnresolvedFixtureReferenceIdResolver(new \Nelmio\Alice\Generator\Resolver\Value\Chainable\SelfFixtureReferenceResolver(new \Nelmio\Alice\Generator\Resolver\Value\Chainable\FixtureReferenceResolver())), 7 => new \Nelmio\Alice\Generator\Resolver\Value\Chainable\FixtureWildcardReferenceResolver(), 8 => new \Nelmio\Alice\Generator\Resolver\Value\Chainable\ListValueResolver(), 9 => new \Nelmio\Alice\Generator\Resolver\Value\Chainable\OptionalValueResolver(), 10 => new \Nelmio\Alice\Generator\Resolver\Value\Chainable\ParameterValueResolver(), 11 => new \Nelmio\Alice\Generator\Resolver\Value\Chainable\UniqueValueResolver(new \Nelmio\Alice\Generator\Resolver\UniqueValuesPool(), NULL, 150), 12 => new \Nelmio\Alice\Generator\Resolver\Value\Chainable\ValueForCurrentValueResolver(), 13 => new \Nelmio\Alice\Generator\Resolver\Value\Chainable\VariableValueResolver()]);
$i = new \Hautelook\AliceBundle\Alice\Generator\Instantiator\Chainable\InstantiatedReferenceInstantiator();
$i->setContainer($this);

return $this->services['nelmio_alice.data_loader'] = new \Nelmio\Alice\Loader\SimpleDataLoader(new \Nelmio\Alice\FixtureBuilder\SimpleBuilder(new \Nelmio\Alice\FixtureBuilder\Denormalizer\SimpleDenormalizer(new \Nelmio\Alice\FixtureBuilder\Denormalizer\Parameter\SimpleParameterBagDenormalizer(), new \Nelmio\Alice\FixtureBuilder\Denormalizer\Fixture\SimpleFixtureBagDenormalizer(new \Nelmio\Alice\FixtureBuilder\Denormalizer\Fixture\TolerantFixtureDenormalizer(new \Nelmio\Alice\FixtureBuilder\Denormalizer\Fixture\FixtureDenormalizerRegistry($a, [0 => new \Nelmio\Alice\FixtureBuilder\Denormalizer\Fixture\Chainable\SimpleCollectionDenormalizer(new \Nelmio\Alice\FixtureBuilder\Denormalizer\Fixture\Chainable\CollectionDenormalizerWithTemporaryFixture(new \Nelmio\Alice\FixtureBuilder\Denormalizer\Fixture\Chainable\NullListNameDenormalizer())), 1 => new \Nelmio\Alice\FixtureBuilder\Denormalizer\Fixture\Chainable\ReferenceRangeNameDenormalizer($f), 2 => new \Nelmio\Alice\FixtureBuilder\Denormalizer\Fixture\Chainable\SimpleCollectionDenormalizer(new \Nelmio\Alice\FixtureBuilder\Denormalizer\Fixture\Chainable\CollectionDenormalizerWithTemporaryFixture(new \Nelmio\Alice\FixtureBuilder\Denormalizer\Fixture\Chainable\NullRangeNameDenormalizer())), 3 => new \Nelmio\Alice\FixtureBuilder\Denormalizer\Fixture\Chainable\SimpleDenormalizer($f)])), $a))), new \Nelmio\Alice\Generator\DoublePassGenerator(new \Nelmio\Alice\Generator\Resolver\FixtureSet\RemoveConflictingObjectsResolver(new \Nelmio\Alice\Generator\Resolver\FixtureSet\SimpleFixtureSetResolver(new \Nelmio\Alice\Generator\Resolver\Parameter\RemoveConflictingParametersParameterBagResolver(new \Nelmio\Alice\Generator\Resolver\Parameter\SimpleParameterBagResolver(new \Nelmio\Alice\Generator\Resolver\Parameter\ParameterResolverRegistry([0 => new \Nelmio\Alice\Generator\Resolver\Parameter\Chainable\StaticParameterResolver(), 1 => new \Nelmio\Alice\Generator\Resolver\Parameter\Chainable\ArrayParameterResolver(), 2 => new \Nelmio\Alice\Generator\Resolver\Parameter\Chainable\RecursiveParameterResolver(new \Nelmio\Alice\Generator\Resolver\Parameter\Chainable\StringParameterResolver(), 5)]))), new \Nelmio\Alice\Generator\Resolver\Fixture\TemplateFixtureBagResolver())), new \Nelmio\Alice\Generator\ObjectGenerator\CompleteObjectGenerator(new \Nelmio\Alice\Generator\ObjectGenerator\SimpleObjectGenerator($h, new \Nelmio\Alice\Generator\Instantiator\ExistingInstanceInstantiator(new \Nelmio\Alice\Generator\Instantiator\InstantiatorResolver(new \Nelmio\Alice\Generator\Instantiator\InstantiatorRegistry([0 => new \Nelmio\Alice\Generator\Instantiator\Chainable\NoCallerMethodCallInstantiator(), 1 => new \Nelmio\Alice\Generator\Instantiator\Chainable\NullConstructorInstantiator(), 2 => new \Nelmio\Alice\Generator\Instantiator\Chainable\NoMethodCallInstantiator(), 3 => new \Nelmio\Alice\Generator\Instantiator\Chainable\StaticFactoryInstantiator(), 4 => $i]))), new \Nelmio\Alice\Generator\Hydrator\SimpleHydrator(new \Nelmio\Alice\Generator\Hydrator\Property\SymfonyPropertyAccessorHydrator($g)), new \Nelmio\Alice\Generator\Caller\SimpleCaller(new \Nelmio\Alice\Generator\Caller\CallProcessorRegistry([0 => new \Nelmio\Alice\Generator\Caller\Chainable\ConfiguratorMethodCallProcessor(), 1 => new \Nelmio\Alice\Generator\Caller\Chainable\MethodCallWithReferenceProcessor(), 2 => new \Nelmio\Alice\Generator\Caller\Chainable\OptionalMethodCallProcessor(), 3 => new \Nelmio\Alice\Generator\Caller\Chainable\SimpleMethodCallProcessor()]), $h)))));
